{"ast":null,"code":"var _jsxFileName = \"/home/archi/MyProjects/React-redux-run-net/src/components/Content/MyPosts/MyPosts-container.js\";\nimport MyPosts from \"./MyPosts\";\nimport { addPostAction, updateTextPostAction } from \"../../../redux/post-reducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyPostsContainer = props => {\n  let addPost = text => {\n    props.store.dispatch(addPostAction(text));\n  };\n\n  let onPostChange = text => {\n    props.store.dispatch(updateTextPostAction(text));\n  };\n\n  return /*#__PURE__*/_jsxDEV(MyPosts, {\n    newPostText: props.store.getState().postsPage.newPostText,\n    onPostChange: onPostChange,\n    addPost: addPost,\n    postsData: props.store.getState().postsPage.contentDataPosts\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n};\n\n_c = MyPostsContainer;\n\nlet mapStateToProps = state => {\n  return {\n    newPostText: state.postsPage.newPostText,\n    postsData: state.postsPage.contentDataPosts\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    onPostChange: text => {\n      dispatch(addPostAction(text));\n    }\n  };\n};\n\nexport default MyPostsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyPostsContainer\");","map":{"version":3,"sources":["/home/archi/MyProjects/React-redux-run-net/src/components/Content/MyPosts/MyPosts-container.js"],"names":["MyPosts","addPostAction","updateTextPostAction","MyPostsContainer","props","addPost","text","store","dispatch","onPostChange","getState","postsPage","newPostText","contentDataPosts","mapStateToProps","state","postsData","mapDispatchToProps"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,SAAQC,aAAR,EAAuBC,oBAAvB,QAAkD,6BAAlD;;;AAGA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAChC,MAAIC,OAAO,GAAIC,IAAD,IAAU;AACpBF,IAAAA,KAAK,CAACG,KAAN,CAAYC,QAAZ,CAAqBP,aAAa,CAACK,IAAD,CAAlC;AACH,GAFD;;AAGA,MAAIG,YAAY,GAAIH,IAAD,IAAU;AACzBF,IAAAA,KAAK,CAACG,KAAN,CAAYC,QAAZ,CAAqBN,oBAAoB,CAACI,IAAD,CAAzC;AACH,GAFD;;AAGA,sBACI,QAAC,OAAD;AAAS,IAAA,WAAW,EAAIF,KAAK,CAACG,KAAN,CAAYG,QAAZ,GAAuBC,SAAvB,CAAiCC,WAAzD;AAAsE,IAAA,YAAY,EAAIH,YAAtF;AAAoG,IAAA,OAAO,EAAIJ,OAA/G;AAAwH,IAAA,SAAS,EAAID,KAAK,CAACG,KAAN,CAAYG,QAAZ,GAAuBC,SAAvB,CAAiCE;AAAtK;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAVD;;KAAMV,gB;;AAYN,IAAIW,eAAe,GAAIC,KAAD,IAAU;AAC5B,SAAO;AACCH,IAAAA,WAAW,EAAEG,KAAK,CAACJ,SAAN,CAAgBC,WAD9B;AAECI,IAAAA,SAAS,EAAGD,KAAK,CAACJ,SAAN,CAAgBE;AAF7B,GAAP;AAKH,CAND;;AAOA,IAAII,kBAAkB,GAAIT,QAAD,IAAa;AAClC,SAAM;AACFC,IAAAA,YAAY,EAAIH,IAAD,IAAU;AACrBE,MAAAA,QAAQ,CAACP,aAAa,CAACK,IAAD,CAAd,CAAR;AACH;AAHC,GAAN;AAKH,CAND;;AAQA,eAAeH,gBAAf","sourcesContent":["import MyPosts from \"./MyPosts\";\nimport {addPostAction, updateTextPostAction} from \"../../../redux/post-reducer\";\n\n\nconst MyPostsContainer = (props) => {\n    let addPost = (text) => {\n        props.store.dispatch(addPostAction(text))\n    }\n    let onPostChange = (text) => {\n        props.store.dispatch(updateTextPostAction(text));\n    }\n    return(\n        <MyPosts newPostText = {props.store.getState().postsPage.newPostText} onPostChange = {onPostChange} addPost = {addPost} postsData = {props.store.getState().postsPage.contentDataPosts} />\n    )\n}\n\nlet mapStateToProps = (state) =>{\n    return({\n            newPostText: state.postsPage.newPostText,\n            postsData : state.postsPage.contentDataPosts\n        }\n    )\n}\nlet mapDispatchToProps = (dispatch) =>{\n    return{\n        onPostChange : (text) => {\n            dispatch(addPostAction(text))\n        }\n    }\n}\n\nexport default MyPostsContainer;"]},"metadata":{},"sourceType":"module"}