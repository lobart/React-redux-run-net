{"ast":null,"code":"import { userAPI, followAPI } from \"../api/api\";\nconst FOLLOW = 'user/FOLLOW';\nconst UNFOLLOW = 'user/UNFOLLOW';\nconst SETUSERS = 'user/SETUSERS';\nconst SETCURRENTPAGE = 'user/SETCURRENTPAGE';\nconst SETTOTALUSERSCOUNT = 'user/SETTOTALUSERSCOUNT';\nconst TOGGLE_IS_FETCHING = 'user/TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FPROGRESS = 'user/TOGGLE_IS_FPROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 20,\n  currentPage: 2,\n  isFetching: false,\n  followingProgress: []\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userID) {\n            return { ...u,\n              followed: true\n            };\n          } else {\n            return u;\n          }\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userID) {\n            return { ...u,\n              followed: false\n            };\n          } else {\n            return u;\n          }\n        })\n      };\n\n    case SETUSERS:\n      return { ...state,\n        users: action.users\n      };\n\n    case SETCURRENTPAGE:\n      return { ...state,\n        currentPage: action.currentPage\n      };\n\n    case SETTOTALUSERSCOUNT:\n      return { ...state,\n        totalUsersCount: action.totalUsersCount\n      };\n\n    case TOGGLE_IS_FETCHING:\n      return { ...state,\n        isFetching: action.isFetching\n      };\n\n    case TOGGLE_IS_FPROGRESS:\n      return { ...state,\n        followingProgress: action.isFetching ? [...state.followingProgress, action.userID] : [...state.followingProgress.filter(id => id != action.userID)]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport let follow = userID => ({\n  type: FOLLOW,\n  userID\n});\nexport let unfollow = userID => ({\n  type: UNFOLLOW,\n  userID\n});\nexport let setUsers = users => ({\n  type: SETUSERS,\n  users\n});\nexport let setCurrentPage = currentPage => ({\n  type: SETCURRENTPAGE,\n  currentPage\n});\nexport let setTotalUsersCount = totalUsersCount => ({\n  type: SETTOTALUSERSCOUNT,\n  totalUsersCount\n});\nexport let setToggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport let setToggleIsFProgress = (isFetching, userID) => ({\n  type: TOGGLE_IS_FPROGRESS,\n  isFetching,\n  userID\n});\nexport let getUsers = (pageNumber, pageSize) => {\n  return dispatch => {\n    dispatch(setCurrentPage(pageNumber));\n    dispatch(setToggleIsFetching(true));\n    userAPI.getUsers(pageNumber, pageSize).then(data => {\n      dispatch(setToggleIsFetching(false));\n      dispatch(setUsers(data.items));\n      dispatch(setTotalUsersCount(data.totalCount));\n    });\n  };\n};\nexport let onUnfollow = uID => {\n  return dispatch => {\n    dispatch(setToggleIsFProgress(true, uID));\n    followAPI.toUnFollow(uID).then(data => {\n      if (data.resultCode == 0) {\n        dispatch(unfollow(uID));\n      }\n\n      dispatch(setToggleIsFProgress(false, uID));\n    });\n  };\n};\nexport let onFollow = uID => {\n  return dispatch => {\n    dispatch(setToggleIsFProgress(true, uID));\n    followAPI.toFollow(uID).then(data => {\n      if (data.resultCode == 0) {\n        dispatch(follow(uID));\n      }\n\n      dispatch(setToggleIsFProgress(false, uID));\n    });\n  };\n};\nexport default usersReducer;","map":{"version":3,"sources":["/home/archi/MyProjects/React-redux-run-net/src/redux/user-reducer.js"],"names":["userAPI","followAPI","FOLLOW","UNFOLLOW","SETUSERS","SETCURRENTPAGE","SETTOTALUSERSCOUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FPROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingProgress","usersReducer","state","action","type","map","u","id","userID","followed","filter","follow","unfollow","setUsers","setCurrentPage","setTotalUsersCount","setToggleIsFetching","setToggleIsFProgress","getUsers","pageNumber","dispatch","then","data","items","totalCount","onUnfollow","uID","toUnFollow","resultCode","onFollow","toFollow"],"mappings":"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","sourcesContent":["import {userAPI,followAPI} from \"../api/api\";\n\nconst FOLLOW = 'user/FOLLOW';\nconst UNFOLLOW = 'user/UNFOLLOW';\nconst SETUSERS = 'user/SETUSERS';\nconst SETCURRENTPAGE = 'user/SETCURRENTPAGE';\nconst SETTOTALUSERSCOUNT = 'user/SETTOTALUSERSCOUNT';\nconst TOGGLE_IS_FETCHING = 'user/TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FPROGRESS = 'user/TOGGLE_IS_FPROGRESS';\n\nlet initialState = {\n    users:[],\n    pageSize: 5,\n    totalUsersCount: 20,\n    currentPage: 2,\n    isFetching: false,\n    followingProgress: []\n}\n\nconst usersReducer = (state = initialState, action) => {\n    switch (action.type){\n        case FOLLOW :\n            return {\n                ...state,\n                users: state.users.map (u => {\n                    if (u.id === action.userID){\n                        return {...u, followed: true};\n                    } else {\n                        return u;\n                    }\n                })\n            }\n        case UNFOLLOW :\n            return {\n                ...state,\n                users: state.users.map (u => {\n                    if (u.id === action.userID){\n                        return {...u, followed: false};\n                    } else {\n                        return u;\n                    }\n                })\n            }\n        case SETUSERS:\n            return {...state, users : action.users};\n        case SETCURRENTPAGE:\n            return {...state, currentPage: action.currentPage};\n        case SETTOTALUSERSCOUNT:\n            return {...state, totalUsersCount: action.totalUsersCount};\n        case TOGGLE_IS_FETCHING:\n            return {...state, isFetching: action.isFetching};\n        case TOGGLE_IS_FPROGRESS:\n            return {...state,\n                followingProgress : action.isFetching\n                    ? [...state.followingProgress, action.userID]\n                    : [...state.followingProgress.filter(id => id != action.userID)]\n                 };\n        default: return state;\n}}\n\nexport let follow = (userID) => ({type:FOLLOW, userID });\nexport let unfollow = (userID) => ({type:UNFOLLOW, userID});\nexport let setUsers = (users) => ({type: SETUSERS, users});\nexport let setCurrentPage = (currentPage) => ({type: SETCURRENTPAGE, currentPage});\nexport let setTotalUsersCount = (totalUsersCount) => ({type: SETTOTALUSERSCOUNT, totalUsersCount});\nexport let setToggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching});\nexport let setToggleIsFProgress = (isFetching, userID) => ({type: TOGGLE_IS_FPROGRESS, isFetching, userID});\n\nexport let getUsers = (pageNumber, pageSize) => { return  (dispatch) => {\n    dispatch(setCurrentPage(pageNumber));\n    dispatch(setToggleIsFetching(true));\n\n    userAPI.getUsers(pageNumber, pageSize).then(data => {\n        dispatch(setToggleIsFetching(false));\n        dispatch(setUsers(data.items));\n        dispatch(setTotalUsersCount(data.totalCount))\n    })\n}}\n\nexport let onUnfollow = (uID) => { return (dispatch) => {\n    dispatch(setToggleIsFProgress(true, uID));\n    followAPI.toUnFollow(uID).then(data => {\n        if(data.resultCode == 0){\n            dispatch(unfollow(uID))\n        }\n        dispatch(setToggleIsFProgress(false, uID));\n    })\n}}\nexport let onFollow = (uID) => { return (dispatch) => {\n    dispatch(setToggleIsFProgress(true, uID));\n    followAPI.toFollow(uID).then(data => {\n        if(data.resultCode == 0){\n            dispatch(follow(uID))\n        }\n        dispatch(setToggleIsFProgress(false, uID));\n    })\n}}\nexport default  usersReducer;"]},"metadata":{},"sourceType":"module"}