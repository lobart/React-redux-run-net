{"ast":null,"code":"import { authAPI, profileAPI } from \"../api/api\";\nimport { setStatus } from \"./profile-reducer\";\nconst LOGIN = 'LOGIN';\nlet initialState = {\n  login: null,\n  email: null,\n  password: null,\n  rememberMe: false\n};\n\nconst loginReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOGIN:\n      return { ...state,\n        email: action.email,\n        password: action.password,\n        rememberMe: action.rememberMe\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport let logIn = (email, password, rememberMe) => {\n  return {\n    type: LOGIN,\n    email: email,\n    password: password,\n    rememberMe: rememberMe\n  };\n};\nexport let logInToServer = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(data => {\n    if (data.resultCode === 0) {\n      dispatch(logIn(email, password, rememberMe));\n      console.log('Authorization is on!');\n    } else {\n      console.log('Invalid authorization!');\n    }\n  });\n};\nexport default loginReducer;","map":{"version":3,"sources":["/home/archi/MyProjects/React-redux-run-net/src/redux/login-reducer.js"],"names":["authAPI","profileAPI","setStatus","LOGIN","initialState","login","email","password","rememberMe","loginReducer","state","action","type","logIn","logInToServer","dispatch","then","data","resultCode","console","log"],"mappings":"AAAA,SAAQA,OAAR,EAAiBC,UAAjB,QAAkC,YAAlC;AACA,SAAQC,SAAR,QAAwB,mBAAxB;AAEA,MAAMC,KAAK,GAAG,OAAd;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAE,IADQ;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,QAAQ,EAAE,IAHK;AAIfC,EAAAA,UAAU,EAAE;AAJG,CAAnB;;AAOA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,KAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHJ,QAAAA,KAAK,EAAEK,MAAM,CAACL,KAFX;AAGHC,QAAAA,QAAQ,EAAEI,MAAM,CAACJ,QAHd;AAIHC,QAAAA,UAAU,EAAEG,MAAM,CAACH;AAJhB,OAAP;;AAMJ;AACI,aAAOE,KAAP;AATR;AAWH,CAZD;;AAcA,OAAO,IAAIG,KAAK,GAAG,CAACP,KAAD,EAAQC,QAAR,EAAkBC,UAAlB,KAAiC;AAChD,SACI;AAACI,IAAAA,IAAI,EAAET,KAAP;AAAcG,IAAAA,KAAK,EAACA,KAApB;AAA2BC,IAAAA,QAAQ,EAAEA,QAArC;AAA+CC,IAAAA,UAAU,EAAEA;AAA3D,GADJ;AAGH,CAJM;AAMP,OAAO,IAAIM,aAAa,GAAG,CAACR,KAAD,EAAQC,QAAR,EAAkBC,UAAlB,KAAiCO,QAAD,IAAc;AACrEf,EAAAA,OAAO,CAACK,KAAR,CAAcC,KAAd,EAAqBC,QAArB,EAA+BC,UAA/B,EAA2CQ,IAA3C,CAAgDC,IAAI,IAAI;AACpD,QAAGA,IAAI,CAACC,UAAL,KAAoB,CAAvB,EAA0B;AACtBH,MAAAA,QAAQ,CAACF,KAAK,CAACP,KAAD,EAAQC,QAAR,EAAkBC,UAAlB,CAAN,CAAR;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH,KAHD,MAIK;AACDD,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH;AACJ,GARD;AASH,CAVM;AAYP,eAAgBX,YAAhB","sourcesContent":["import {authAPI, profileAPI} from \"../api/api\";\nimport {setStatus} from \"./profile-reducer\";\n\nconst LOGIN = 'LOGIN';\n\n\nlet initialState = {\n    login: null,\n    email: null,\n    password: null,\n    rememberMe: false\n}\n\nconst loginReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case LOGIN :\n            return {\n                ...state,\n                email: action.email,\n                password: action.password,\n                rememberMe: action.rememberMe\n            }\n        default:\n            return state;\n    }\n}\n\nexport let logIn = (email, password, rememberMe) => {\n    return(\n        {type: LOGIN, email:email, password: password, rememberMe: rememberMe}\n    )\n}\n\nexport let logInToServer = (email, password, rememberMe) =>(dispatch) => {\n    authAPI.login(email, password, rememberMe).then(data => {\n        if(data.resultCode === 0) {\n            dispatch(logIn(email, password, rememberMe));\n            console.log('Authorization is on!')\n        }\n        else {\n            console.log('Invalid authorization!')\n        }\n    })\n}\n\nexport default  loginReducer;"]},"metadata":{},"sourceType":"module"}