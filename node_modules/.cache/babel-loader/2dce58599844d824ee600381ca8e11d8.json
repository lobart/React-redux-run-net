{"ast":null,"code":"import { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_AUTH_USER_DATA = 'auth/SET_AUTH_USER_DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_AUTH_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_AUTH_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => async dispatch => {\n  let response = await authAPI.me();\n\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      email,\n      login\n    } = response.data.data;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\nexport let login = (email, password, rememberMe) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n    console.log('Authorization is on!');\n  } else {\n    let message = response.data.messages.length ? response.data.messages[0] : \"Some wrong!\";\n    dispatch(stopSubmit('loginForm', {\n      _error: message\n    }));\n    console.log('Invalid authorization!');\n  }\n};\nexport let logout = () => async dispatch => {\n  let response = await authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n};\nexport default authReducer;","map":{"version":3,"sources":["/home/archi/MyProjects/React-redux-run-net/src/redux/auth-reducer.js"],"names":["authAPI","stopSubmit","SET_AUTH_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","response","me","data","resultCode","id","password","rememberMe","console","log","message","messages","length","_error","logout"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,YAAtB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAIA,MAAMC,kBAAkB,GAAG,yBAA3B;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAC,IADQ;AAEfC,EAAAA,KAAK,EAAC,IAFS;AAGfC,EAAAA,KAAK,EAAC,IAHS;AAIfC,EAAAA,MAAM,EAAC;AAJQ,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,kBAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAIJ;AAAS,aAAOH,KAAP;AANb;AAQH,CATD;;AAWA,OAAO,MAAMI,eAAe,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,MAAmC;AAACI,EAAAA,IAAI,EAAET,kBAAP;AAC9DU,EAAAA,OAAO,EAAE;AAACR,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB;AADqD,CAAnC,CAAxB;AAEP,OAAO,MAAMO,eAAe,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACrD,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACiB,EAAR,EAArB;;AACA,MAAID,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChC,QAAI;AAACC,MAAAA,EAAD;AAAKf,MAAAA,KAAL;AAAYC,MAAAA;AAAZ,QAAqBU,QAAQ,CAACE,IAAT,CAAcA,IAAvC;AACAH,IAAAA,QAAQ,CAACF,eAAe,CAACO,EAAD,EAAKf,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACJ,CANM;AASP,OAAO,IAAIA,KAAK,GAAG,CAACD,KAAD,EAAQgB,QAAR,EAAkBC,UAAlB,KAAgC,MAAOP,QAAP,IAAoB;AACnE,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBgB,QAArB,EAA+BC,UAA/B,CAArB;;AACI,MAAGN,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAhC,EAAmC;AAC/BJ,IAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH,GAHD,MAIK;AACD,QAAIC,OAAO,GAAGT,QAAQ,CAACE,IAAT,CAAcQ,QAAd,CAAuBC,MAAvB,GAAgCX,QAAQ,CAACE,IAAT,CAAcQ,QAAd,CAAuB,CAAvB,CAAhC,GAA4D,aAA1E;AACAX,IAAAA,QAAQ,CAACd,UAAU,CAAC,WAAD,EAAa;AAAC2B,MAAAA,MAAM,EAACH;AAAR,KAAb,CAAX,CAAR;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH;AACR,CAXM;AAYP,OAAO,IAAIK,MAAM,GAAG,MAAK,MAAOd,QAAP,IAAoB;AACzC,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAAC6B,MAAR,EAArB;;AACQ,MAAIb,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,IAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACZ,CALM;AAMP,eAAeL,WAAf","sourcesContent":["import {authAPI} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\n\n\n\nconst SET_AUTH_USER_DATA = 'auth/SET_AUTH_USER_DATA';\n\nlet initialState = {\n    userId:null,\n    email:null,\n    login:null,\n    isAuth:false\n    }\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_AUTH_USER_DATA:\n            return {\n                ...state,\n                ...action.payload\n            }\n        default: return state;\n    }\n}\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({type: SET_AUTH_USER_DATA,\n    payload: {userId, email, login, isAuth}})\nexport const getAuthUserData = () => async (dispatch) => {\n    let response = await authAPI.me();\n    if (response.data.resultCode === 0) {\n        let {id, email, login} = response.data.data;\n        dispatch(setAuthUserData(id, email, login, true));\n    }\n}\n\n\nexport let login = (email, password, rememberMe) =>async (dispatch) => {\n    let response = await authAPI.login(email, password, rememberMe)\n        if(response.data.resultCode === 0) {\n            dispatch(getAuthUserData())\n            console.log('Authorization is on!')\n        }\n        else {\n            let message = response.data.messages.length ? response.data.messages[0] : \"Some wrong!\"\n            dispatch(stopSubmit('loginForm',{_error:message }));\n            console.log('Invalid authorization!')\n        }\n}\nexport let logout = () =>async (dispatch) => {\n    let response = await authAPI.logout();\n            if (response.data.resultCode === 0) {\n                dispatch(setAuthUserData(null, null, null, false));\n            }\n}\nexport default authReducer;\n"]},"metadata":{},"sourceType":"module"}