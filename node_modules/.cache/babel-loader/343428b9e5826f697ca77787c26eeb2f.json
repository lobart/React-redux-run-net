{"ast":null,"code":"import { authAPI, profileAPI } from \"../api/api\";\nimport { setStatus } from \"./profile-reducer\";\nconst LOGIN = 'LOGIN';\nlet initialState = {\n  login: null,\n  email: null\n};\n\nconst loginReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOGIN:\n      return { ...state,\n        email: action.email,\n        password: action.password,\n        rememberMe: action.rememberMe\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport let logIn = (email, password, rememberMe) => {\n  return {\n    type: LOGIN,\n    email: email,\n    password: password,\n    rememberMe: rememberMe\n  };\n};\nexport let logInToServer = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(logIn(email, password, rememberMe));\n    }\n  });\n};\nexport default loginReducer;","map":{"version":3,"sources":["/home/archi/MyProjects/React-redux-run-net/src/redux/login-reducer.js"],"names":["authAPI","profileAPI","setStatus","LOGIN","initialState","login","email","loginReducer","state","action","type","password","rememberMe","logIn","logInToServer","dispatch","then","response","data","resultCode"],"mappings":"AAAA,SAAQA,OAAR,EAAiBC,UAAjB,QAAkC,YAAlC;AACA,SAAQC,SAAR,QAAwB,mBAAxB;AAEA,MAAMC,KAAK,GAAG,OAAd;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAE,IADQ;AAEfC,EAAAA,KAAK,EAAE;AAFQ,CAAnB;;AAKA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,KAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHF,QAAAA,KAAK,EAAEG,MAAM,CAACH,KAFX;AAGHK,QAAAA,QAAQ,EAAEF,MAAM,CAACE,QAHd;AAIHC,QAAAA,UAAU,EAAEH,MAAM,CAACG;AAJhB,OAAP;;AAMJ;AACI,aAAOJ,KAAP;AATR;AAWH,CAZD;;AAcA,OAAO,IAAIK,KAAK,GAAG,CAACP,KAAD,EAAQK,QAAR,EAAkBC,UAAlB,KAAiC;AAChD,SACI;AAACF,IAAAA,IAAI,EAAEP,KAAP;AAAcG,IAAAA,KAAK,EAACA,KAApB;AAA2BK,IAAAA,QAAQ,EAAEA,QAArC;AAA+CC,IAAAA,UAAU,EAAEA;AAA3D,GADJ;AAGH,CAJM;AAMP,OAAO,IAAIE,aAAa,GAAG,CAACR,KAAD,EAAQK,QAAR,EAAkBC,UAAlB,KAAiCG,QAAD,IAAc;AACrEf,EAAAA,OAAO,CAACK,KAAR,CAAcC,KAAd,EAAqBK,QAArB,EAA+BC,UAA/B,EAA2CI,IAA3C,CAAgDC,QAAQ,IAAI;AACxD,QAAGA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAhC,EAAmC;AAC/BJ,MAAAA,QAAQ,CAACF,KAAK,CAACP,KAAD,EAAQK,QAAR,EAAkBC,UAAlB,CAAN,CAAR;AACH;AACJ,GAJD;AAKH,CANM;AAQP,eAAgBL,YAAhB","sourcesContent":["import {authAPI, profileAPI} from \"../api/api\";\nimport {setStatus} from \"./profile-reducer\";\n\nconst LOGIN = 'LOGIN';\n\n\nlet initialState = {\n    login: null,\n    email: null\n}\n\nconst loginReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case LOGIN :\n            return {\n                ...state,\n                email: action.email,\n                password: action.password,\n                rememberMe: action.rememberMe\n            }\n        default:\n            return state;\n    }\n}\n\nexport let logIn = (email, password, rememberMe) => {\n    return(\n        {type: LOGIN, email:email, password: password, rememberMe: rememberMe}\n    )\n}\n\nexport let logInToServer = (email, password, rememberMe) =>(dispatch) => {\n    authAPI.login(email, password, rememberMe).then(response => {\n        if(response.data.resultCode === 0) {\n            dispatch(logIn(email, password, rememberMe))\n        }\n    })\n}\n\nexport default  loginReducer;"]},"metadata":{},"sourceType":"module"}