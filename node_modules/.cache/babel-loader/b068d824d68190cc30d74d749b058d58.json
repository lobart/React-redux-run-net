{"ast":null,"code":"import userAPI from \"../api/api\";\nimport { setUserInfo, setUserPhoto } from \"./header-reducer\";\nconst ADD_POST = 'ADD-POST';\nconst UPDATE_TEXT_POST = 'UPDATE-TEXT-POST';\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\nlet initialState = {\n  contentDataPosts: [{\n    post: 'Hello!'\n  }, {\n    post: 'Everybody!'\n  }, {\n    post: 'Vyshe Ruki!'\n  }, {\n    post: 'Suki Blyadi!'\n  }],\n  newPostText: 'Type new Post!',\n  profile: null,\n  myprofile: null\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      return { ...state,\n        contentDataPosts: [...state.contentDataPosts, {\n          post: state.newPostText\n        }]\n      };\n\n    case UPDATE_TEXT_POST:\n      return { ...state,\n        newPostText: action.text\n      };\n\n    case SET_USER_PROFILE:\n      return { ...state,\n        profile: action.profile\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport let addPostAction = text => {\n  return {\n    type: ADD_POST,\n    text: text\n  };\n};\nexport let updateTextPostAction = text => {\n  return {\n    type: UPDATE_TEXT_POST,\n    text: text\n  };\n};\nexport let setUserProfile = profile => ({\n  type: SET_USER_PROFILE,\n  profile\n});\nexport let getProfile = uID => dispatch => {\n  debugger;\n  userAPI.getProfile(uID).then(data => {\n    dispatch(setUserProfile(data));\n  });\n};\nexport let getMyProfile = () => dispatch => {\n  userAPI.authMe().then(data => {\n    dispatch(setUserInfo(data.data));\n    userAPI.getProfile(data.data.id).then(response => {\n      dispatch(setUserPhoto(response.photos.small));\n    });\n  });\n};\nexport default profileReducer;","map":{"version":3,"sources":["/home/archi/MyProjects/React-redux-run-net/src/redux/profile-reducer.js"],"names":["userAPI","setUserInfo","setUserPhoto","ADD_POST","UPDATE_TEXT_POST","SET_USER_PROFILE","initialState","contentDataPosts","post","newPostText","profile","myprofile","profileReducer","state","action","type","text","addPostAction","updateTextPostAction","setUserProfile","getProfile","uID","dispatch","then","data","getMyProfile","authMe","id","response","photos","small"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,YAApB;AACA,SAAQC,WAAR,EAAqBC,YAArB,QAAwC,kBAAxC;AAEA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,IAAIC,YAAY,GAAG;AACfC,EAAAA,gBAAgB,EACZ,CAAC;AAACC,IAAAA,IAAI,EAAE;AAAP,GAAD,EACI;AAACA,IAAAA,IAAI,EAAE;AAAP,GADJ,EAEI;AAACA,IAAAA,IAAI,EAAE;AAAP,GAFJ,EAGI;AAACA,IAAAA,IAAI,EAAE;AAAP,GAHJ,CAFW;AAMfC,EAAAA,WAAW,EAAE,gBANE;AAOfC,EAAAA,OAAO,EAAE,IAPM;AAQfC,EAAAA,SAAS,EAAE;AARI,CAAnB;;AAUA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AACrD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKZ,QAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHN,QAAAA,gBAAgB,EAAG,CAAC,GAAGM,KAAK,CAACN,gBAAV,EAA4B;AAACC,UAAAA,IAAI,EAAGK,KAAK,CAACJ;AAAd,SAA5B;AAFhB,OAAP;;AAIJ,SAAKL,gBAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHJ,QAAAA,WAAW,EAAEK,MAAM,CAACE;AAFjB,OAAP;;AAIJ,SAAKX,gBAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHH,QAAAA,OAAO,EAAEI,MAAM,CAACJ;AAFb,OAAP;;AAIJ;AAAS,aAAOG,KAAP;AAhBb;AAmBH,CApBD;;AAsBA,OAAO,IAAII,aAAa,GAAID,IAAD,IAAU;AACjC,SACI;AAACD,IAAAA,IAAI,EAAEZ,QAAP;AAAiBa,IAAAA,IAAI,EAACA;AAAtB,GADJ;AAGH,CAJM;AAMP,OAAO,IAAIE,oBAAoB,GAAIF,IAAD,IAAU;AACxC,SACI;AAACD,IAAAA,IAAI,EAAEX,gBAAP;AAAyBY,IAAAA,IAAI,EAACA;AAA9B,GADJ;AAGH,CAJM;AAMP,OAAO,IAAIG,cAAc,GAAIT,OAAD,KAAc;AACtCK,EAAAA,IAAI,EAAEV,gBADgC;AACdK,EAAAA;AADc,CAAd,CAArB;AAGP,OAAO,IAAIU,UAAU,GAAIC,GAAD,IAAUC,QAAD,IAAc;AAC3C;AACAtB,EAAAA,OAAO,CAACoB,UAAR,CAAmBC,GAAnB,EAAwBE,IAAxB,CAA6BC,IAAI,IAAI;AACjCF,IAAAA,QAAQ,CAACH,cAAc,CAACK,IAAD,CAAf,CAAR;AACP,GAFG;AAED,CAJI;AAMP,OAAO,IAAIC,YAAY,GAAG,MAAMH,QAAD,IAAa;AACxCtB,EAAAA,OAAO,CAAC0B,MAAR,GAAiBH,IAAjB,CAAsBC,IAAI,IAAI;AAC9BF,IAAAA,QAAQ,CAACrB,WAAW,CAACuB,IAAI,CAACA,IAAN,CAAZ,CAAR;AACAxB,IAAAA,OAAO,CAACoB,UAAR,CAAmBI,IAAI,CAACA,IAAL,CAAUG,EAA7B,EAAiCJ,IAAjC,CAAsCK,QAAQ,IAAI;AAC9CN,MAAAA,QAAQ,CAACpB,YAAY,CAAC0B,QAAQ,CAACC,MAAT,CAAgBC,KAAjB,CAAb,CAAR;AACH,KAFD;AAGH,GALG;AAKD,CANI;AAQP,eAAelB,cAAf","sourcesContent":["import userAPI from \"../api/api\";\nimport {setUserInfo, setUserPhoto} from \"./header-reducer\";\n\nconst ADD_POST = 'ADD-POST';\nconst UPDATE_TEXT_POST = 'UPDATE-TEXT-POST';\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\nlet initialState = {\n    contentDataPosts:\n        [{post: 'Hello!'},\n            {post: 'Everybody!'},\n            {post: 'Vyshe Ruki!'},\n            {post: 'Suki Blyadi!'}],\n    newPostText: 'Type new Post!',\n    profile: null,\n    myprofile: null\n}\nconst profileReducer = (state = initialState, action) => {\n    switch(action.type){\n        case ADD_POST:\n            return {\n                ...state,\n                contentDataPosts : [...state.contentDataPosts, {post : state.newPostText}]\n            };\n        case UPDATE_TEXT_POST:\n            return {\n                ...state,\n                newPostText: action.text\n            };\n        case SET_USER_PROFILE:\n            return {\n                ...state,\n                profile: action.profile\n            };\n        default: return state;\n    }\n\n}\n\nexport let addPostAction = (text) => {\n    return(\n        {type: ADD_POST, text:text}\n    )\n}\n\nexport let updateTextPostAction = (text) => {\n    return(\n        {type: UPDATE_TEXT_POST, text:text}\n    )\n}\n\nexport let setUserProfile = (profile) => ({\n    type: SET_USER_PROFILE, profile\n})\nexport let getProfile = (uID) => (dispatch) => {\n    debugger\n    userAPI.getProfile(uID).then(data => {\n        dispatch(setUserProfile(data));\n})}\n\nexport let getMyProfile = () =>(dispatch) =>{\n    userAPI.authMe().then(data => {\n    dispatch(setUserInfo(data.data));\n    userAPI.getProfile(data.data.id).then(response => {\n        dispatch(setUserPhoto(response.photos.small))\n    })\n})}\n\nexport default profileReducer;"]},"metadata":{},"sourceType":"module"}