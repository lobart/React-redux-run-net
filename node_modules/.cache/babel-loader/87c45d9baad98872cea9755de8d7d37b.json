{"ast":null,"code":"const ADD_POST = 'ADD-POST';\nconst UPDATE_TEXT_POST = 'UPDATE-TEXT-POST';\nconst ADD_DIALOG = 'ADD-DIALOG';\nconst GET_STATE = 'GET-STATE';\nconst ADD_MESSAGE = 'ADD-MESSAGE';\nconst UPDATE_TEXT_MESSAGE = 'UPDATE-TEXT-MESSAGE';\nlet store = {\n  _state: {\n    dialogsData: [{\n      name: 'Archi',\n      id: 1\n    }, {\n      name: 'Roma',\n      id: 2\n    }, {\n      name: 'Lex',\n      id: 3\n    }],\n    contentDataPosts: [{\n      post: 'Hello!'\n    }, {\n      post: 'Everybody!'\n    }, {\n      post: 'Vyshe Ruki!'\n    }, {\n      post: 'Suki Blyadi!'\n    }],\n    messagesData: [{\n      message: 'Hello!'\n    }, {\n      message: 'Salut!'\n    }, {\n      message: 'Ty zdes!'\n    }],\n    navData: [{\n      name: 'Dialog',\n      url: '/dialogs'\n    }, {\n      name: 'Profile',\n      url: '/profile'\n    }, {\n      name: 'Friends',\n      url: '/friends'\n    }, {\n      name: 'Competitions',\n      url: '/competitions'\n    }],\n    newMessageText: 'Type new message!',\n    newPostText: 'Type new Post!'\n  },\n\n  _subscriber() {},\n\n  subscribe(observer) {\n    this._subscriber = observer;\n  },\n\n  dispatch(action) {\n    if (action.type === ADD_POST) {\n      let newPost = {\n        post: action.text\n      };\n\n      this._state.contentDataPosts.push(newPost);\n\n      this._subscriber(this);\n    } else if (action.type === ADD_MESSAGE) {\n      let newMessage = {\n        message: action.text\n      };\n\n      this._state.messagesData.push(newMessage);\n\n      this._subscriber(this);\n    } else if (action.type === UPDATE_TEXT_POST) {\n      this._state.newPostText = action.text;\n\n      this._subscriber(this);\n    } else if (action.type === UPDATE_TEXT_MESSAGE) {\n      this._state.newPostText = action.text;\n\n      this._subscriber(this);\n    } else if (action.type === ADD_DIALOG) {\n      let newDial = {\n        id: 4,\n        name: action.dialog\n      };\n\n      this._state.dialogsData.push(newDial);\n    } else if (action.type === GET_STATE) {\n      return this._state;\n    }\n  }\n\n};\nexport let addPostAction = text => {\n  return {\n    type: ADD_POST,\n    text: text\n  };\n};\nexport let addMessageAction = text => {\n  return {\n    type: ADD_MESSAGE,\n    text: text\n  };\n};\nexport let addDialogAction = text => {\n  return {\n    type: ADD_DIALOG,\n    text: text\n  };\n};\nexport let updateTextPostAction = text => {\n  return {\n    type: UPDATE_TEXT_POST,\n    text: text\n  };\n};\nexport let updateTextMessageAction = text => {\n  return {\n    type: UPDATE_TEXT_MESSAGE,\n    text: text\n  };\n};\nexport let getStateAction = () => {\n  return {\n    type: GET_STATE\n  };\n};\nexport default store;","map":{"version":3,"sources":["/home/archi/MyProjects/React-redux-run-net/src/redux/state.js"],"names":["ADD_POST","UPDATE_TEXT_POST","ADD_DIALOG","GET_STATE","ADD_MESSAGE","UPDATE_TEXT_MESSAGE","store","_state","dialogsData","name","id","contentDataPosts","post","messagesData","message","navData","url","newMessageText","newPostText","_subscriber","subscribe","observer","dispatch","action","type","newPost","text","push","newMessage","newDial","dialog","addPostAction","addMessageAction","addDialogAction","updateTextPostAction","updateTextMessageAction","getStateAction"],"mappings":"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","sourcesContent":["const ADD_POST = 'ADD-POST';\nconst UPDATE_TEXT_POST = 'UPDATE-TEXT-POST';\n\nconst ADD_DIALOG = 'ADD-DIALOG';\nconst GET_STATE = 'GET-STATE';\n\nconst ADD_MESSAGE = 'ADD-MESSAGE';\nconst UPDATE_TEXT_MESSAGE = 'UPDATE-TEXT-MESSAGE';\n\nlet store = {\n\n    _state :{\n        dialogsData : [\n            {name : 'Archi', id:1},\n            {name : 'Roma', id:2},\n            {name : 'Lex', id:3}\n        ],\n        contentDataPosts: [\n            {post : 'Hello!'},\n            {post :'Everybody!'},\n            {post: 'Vyshe Ruki!'},\n            {post : 'Suki Blyadi!'}\n        ],\n        messagesData: [\n            {message: 'Hello!'},\n            {message: 'Salut!'},\n            {message: 'Ty zdes!'},\n        ],\n        navData:[\n            {name: 'Dialog', url:'/dialogs'},\n            {name: 'Profile', url: '/profile'},\n            {name: 'Friends', url: '/friends'},\n            {name: 'Competitions', url: '/competitions'},\n\n        ],\n        newMessageText: 'Type new message!',\n        newPostText: 'Type new Post!'\n\n    },\n    _subscriber(){\n\n    },\n    subscribe(observer){\n        this._subscriber=observer;\n    },\n    dispatch(action){\n        if (action.type === ADD_POST) {\n            let newPost = {\n                post: action.text\n            }\n            this._state.contentDataPosts.push(newPost);\n            this._subscriber(this);\n        } else if (action.type === ADD_MESSAGE){\n            let newMessage = {\n                message: action.text\n            }\n            this._state.messagesData.push(newMessage);\n            this._subscriber(this);\n\n        } else if (action.type === UPDATE_TEXT_POST){\n            this._state.newPostText = action.text;\n            this._subscriber(this);\n\n        } else if (action.type === UPDATE_TEXT_MESSAGE){\n            this._state.newPostText = action.text;\n            this._subscriber(this);\n\n        } else if (action.type === ADD_DIALOG){\n            let newDial = {\n                id: 4,\n                name : action.dialog\n            }\n            this._state.dialogsData.push(newDial)\n        } else if (action.type === GET_STATE){\n            return(this._state);\n        }\n\n    }\n}\n\nexport let addPostAction = (text) => {\n        return(\n            {type: ADD_POST, text:text}\n        )\n}\nexport let addMessageAction = (text) => {\n        return(\n            {type: ADD_MESSAGE, text:text}\n        )\n}\nexport let addDialogAction = (text) => {\n    return(\n        {type: ADD_DIALOG, text:text}\n    )\n}\nexport let updateTextPostAction = (text) => {\n    return(\n        {type: UPDATE_TEXT_POST, text:text}\n    )\n}\nexport let updateTextMessageAction = (text) => {\n    return(\n        {type: UPDATE_TEXT_MESSAGE, text:text}\n    )\n}\nexport let getStateAction= () => {\n    return({type: GET_STATE})\n}\nexport default store;"]},"metadata":{},"sourceType":"module"}