{"ast":null,"code":"const GET_STATE = 'GET-STATE';\nlet store = {\n  _state: {\n    dialogsData: [{\n      name: 'Archi',\n      id: 1\n    }, {\n      name: 'Roma',\n      id: 2\n    }, {\n      name: 'Lex',\n      id: 3\n    }],\n    contentDataPosts: [{\n      post: 'Hello!'\n    }, {\n      post: 'Everybody!'\n    }, {\n      post: 'Vyshe Ruki!'\n    }, {\n      post: 'Suki Blyadi!'\n    }],\n    messagesData: [{\n      message: 'Hello!'\n    }, {\n      message: 'Salut!'\n    }, {\n      message: 'Ty zdes!'\n    }],\n    navData: [{\n      name: 'Dialog',\n      url: '/dialogs'\n    }, {\n      name: 'Profile',\n      url: '/profile'\n    }, {\n      name: 'Friends',\n      url: '/friends'\n    }, {\n      name: 'Competitions',\n      url: '/competitions'\n    }],\n    newMessageText: 'Type new message!',\n    newPostText: 'Type new Post!'\n  },\n\n  _subscriber() {},\n\n  subscribe(observer) {\n    this._subscriber = observer;\n  },\n\n  dispatch(action) {\n    if (action.type === GET_STATE) {\n      return this._state;\n    }\n  }\n\n};\nexport let addPostAction = text => {\n  return {\n    type: ADD_POST,\n    text: text\n  };\n};\nexport let addMessageAction = text => {\n  return {\n    type: ADD_MESSAGE,\n    text: text\n  };\n};\nexport let addDialogAction = text => {\n  return {\n    type: ADD_DIALOG,\n    text: text\n  };\n};\nexport let updateTextPostAction = text => {\n  return {\n    type: UPDATE_TEXT_POST,\n    text: text\n  };\n};\nexport let updateTextMessageAction = text => {\n  return {\n    type: UPDATE_TEXT_MESSAGE,\n    text: text\n  };\n};\nexport let getStateAction = () => {\n  return {\n    type: GET_STATE\n  };\n};\nexport default store;","map":{"version":3,"sources":["/home/archi/MyProjects/React-redux-run-net/src/redux/state.js"],"names":["GET_STATE","store","_state","dialogsData","name","id","contentDataPosts","post","messagesData","message","navData","url","newMessageText","newPostText","_subscriber","subscribe","observer","dispatch","action","type","addPostAction","text","ADD_POST","addMessageAction","ADD_MESSAGE","addDialogAction","ADD_DIALOG","updateTextPostAction","UPDATE_TEXT_POST","updateTextMessageAction","UPDATE_TEXT_MESSAGE","getStateAction"],"mappings":"AACA,MAAMA,SAAS,GAAG,WAAlB;AAIA,IAAIC,KAAK,GAAG;AAERC,EAAAA,MAAM,EAAE;AACJC,IAAAA,WAAW,EAAG,CACV;AAACC,MAAAA,IAAI,EAAG,OAAR;AAAiBC,MAAAA,EAAE,EAAC;AAApB,KADU,EAEV;AAACD,MAAAA,IAAI,EAAG,MAAR;AAAgBC,MAAAA,EAAE,EAAC;AAAnB,KAFU,EAGV;AAACD,MAAAA,IAAI,EAAG,KAAR;AAAeC,MAAAA,EAAE,EAAC;AAAlB,KAHU,CADV;AAMJC,IAAAA,gBAAgB,EAAE,CACd;AAACC,MAAAA,IAAI,EAAG;AAAR,KADc,EAEd;AAACA,MAAAA,IAAI,EAAE;AAAP,KAFc,EAGd;AAACA,MAAAA,IAAI,EAAE;AAAP,KAHc,EAId;AAACA,MAAAA,IAAI,EAAG;AAAR,KAJc,CANd;AAYJC,IAAAA,YAAY,EAAE,CACV;AAACC,MAAAA,OAAO,EAAE;AAAV,KADU,EAEV;AAACA,MAAAA,OAAO,EAAE;AAAV,KAFU,EAGV;AAACA,MAAAA,OAAO,EAAE;AAAV,KAHU,CAZV;AAiBJC,IAAAA,OAAO,EAAC,CACJ;AAACN,MAAAA,IAAI,EAAE,QAAP;AAAiBO,MAAAA,GAAG,EAAC;AAArB,KADI,EAEJ;AAACP,MAAAA,IAAI,EAAE,SAAP;AAAkBO,MAAAA,GAAG,EAAE;AAAvB,KAFI,EAGJ;AAACP,MAAAA,IAAI,EAAE,SAAP;AAAkBO,MAAAA,GAAG,EAAE;AAAvB,KAHI,EAIJ;AAACP,MAAAA,IAAI,EAAE,cAAP;AAAuBO,MAAAA,GAAG,EAAE;AAA5B,KAJI,CAjBJ;AAwBJC,IAAAA,cAAc,EAAE,mBAxBZ;AAyBJC,IAAAA,WAAW,EAAE;AAzBT,GAFA;;AA8BRC,EAAAA,WAAW,GAAE,CAEZ,CAhCO;;AAiCRC,EAAAA,SAAS,CAACC,QAAD,EAAU;AACf,SAAKF,WAAL,GAAiBE,QAAjB;AACH,GAnCO;;AAoCRC,EAAAA,QAAQ,CAACC,MAAD,EAAQ;AACZ,QAAIA,MAAM,CAACC,IAAP,KAAgBnB,SAApB,EAA8B;AAC1B,aAAO,KAAKE,MAAZ;AACH;AACJ;;AAxCO,CAAZ;AA2CA,OAAO,IAAIkB,aAAa,GAAIC,IAAD,IAAU;AAC7B,SACI;AAACF,IAAAA,IAAI,EAAEG,QAAP;AAAiBD,IAAAA,IAAI,EAACA;AAAtB,GADJ;AAGP,CAJM;AAKP,OAAO,IAAIE,gBAAgB,GAAIF,IAAD,IAAU;AAChC,SACI;AAACF,IAAAA,IAAI,EAAEK,WAAP;AAAoBH,IAAAA,IAAI,EAACA;AAAzB,GADJ;AAGP,CAJM;AAKP,OAAO,IAAII,eAAe,GAAIJ,IAAD,IAAU;AACnC,SACI;AAACF,IAAAA,IAAI,EAAEO,UAAP;AAAmBL,IAAAA,IAAI,EAACA;AAAxB,GADJ;AAGH,CAJM;AAKP,OAAO,IAAIM,oBAAoB,GAAIN,IAAD,IAAU;AACxC,SACI;AAACF,IAAAA,IAAI,EAAES,gBAAP;AAAyBP,IAAAA,IAAI,EAACA;AAA9B,GADJ;AAGH,CAJM;AAKP,OAAO,IAAIQ,uBAAuB,GAAIR,IAAD,IAAU;AAC3C,SACI;AAACF,IAAAA,IAAI,EAAEW,mBAAP;AAA4BT,IAAAA,IAAI,EAACA;AAAjC,GADJ;AAGH,CAJM;AAKP,OAAO,IAAIU,cAAc,GAAE,MAAM;AAC7B,SAAO;AAACZ,IAAAA,IAAI,EAAEnB;AAAP,GAAP;AACH,CAFM;AAGP,eAAeC,KAAf","sourcesContent":["\nconst GET_STATE = 'GET-STATE';\n\n\n\nlet store = {\n\n    _state :{\n        dialogsData : [\n            {name : 'Archi', id:1},\n            {name : 'Roma', id:2},\n            {name : 'Lex', id:3}\n        ],\n        contentDataPosts: [\n            {post : 'Hello!'},\n            {post :'Everybody!'},\n            {post: 'Vyshe Ruki!'},\n            {post : 'Suki Blyadi!'}\n        ],\n        messagesData: [\n            {message: 'Hello!'},\n            {message: 'Salut!'},\n            {message: 'Ty zdes!'},\n        ],\n        navData:[\n            {name: 'Dialog', url:'/dialogs'},\n            {name: 'Profile', url: '/profile'},\n            {name: 'Friends', url: '/friends'},\n            {name: 'Competitions', url: '/competitions'},\n\n        ],\n        newMessageText: 'Type new message!',\n        newPostText: 'Type new Post!'\n\n    },\n    _subscriber(){\n\n    },\n    subscribe(observer){\n        this._subscriber=observer;\n    },\n    dispatch(action){\n        if (action.type === GET_STATE){\n            return(this._state);\n        }\n    }\n}\n\nexport let addPostAction = (text) => {\n        return(\n            {type: ADD_POST, text:text}\n        )\n}\nexport let addMessageAction = (text) => {\n        return(\n            {type: ADD_MESSAGE, text:text}\n        )\n}\nexport let addDialogAction = (text) => {\n    return(\n        {type: ADD_DIALOG, text:text}\n    )\n}\nexport let updateTextPostAction = (text) => {\n    return(\n        {type: UPDATE_TEXT_POST, text:text}\n    )\n}\nexport let updateTextMessageAction = (text) => {\n    return(\n        {type: UPDATE_TEXT_MESSAGE, text:text}\n    )\n}\nexport let getStateAction= () => {\n    return({type: GET_STATE})\n}\nexport default store;"]},"metadata":{},"sourceType":"module"}