{"ast":null,"code":"import { authAPI } from \"../api/api\";\nimport { logIn } from \"./login-reducer\";\nconst SET_AUTH_USER_DATA = 'SET_AUTH_USER_DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_AUTH_USER_DATA:\n      return { ...state,\n        ...action.data,\n        isAuth: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login) => ({\n  type: SET_AUTH_USER_DATA,\n  data: {\n    userId,\n    email,\n    login\n  }\n});\nexport const getAuthUserData = () => dispatch => {\n  authAPI.me().then(data => {\n    if (data.resultCode === 0) {\n      let {\n        id,\n        email,\n        login\n      } = data.data;\n      dispatch(setAuthUserData(id, email, login));\n    }\n  });\n};\nexport let login = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData());\n      console.log('Authorization is on!');\n    } else {\n      console.log('Invalid authorization!');\n    }\n  });\n};\nexport let logout = (email, password, rememberMe) => dispatch => {\n  authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {}\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["/home/archi/MyProjects/React-redux-run-net/src/redux/auth-reducer.js"],"names":["authAPI","logIn","SET_AUTH_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","data","setAuthUserData","getAuthUserData","dispatch","me","then","resultCode","id","password","rememberMe","response","console","log","logout"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,YAAtB;AACA,SAAQC,KAAR,QAAoB,iBAApB;AAGA,MAAMC,kBAAkB,GAAG,oBAA3B;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAC,IADQ;AAEfC,EAAAA,KAAK,EAAC,IAFS;AAGfC,EAAAA,KAAK,EAAC,IAHS;AAIfC,EAAAA,MAAM,EAAC;AAJQ,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,kBAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE,IAFP;AAGHL,QAAAA,MAAM,EAAE;AAHL,OAAP;;AAKJ;AAAS,aAAOE,KAAP;AAPb;AASH,CAVD;;AAYA,OAAO,MAAMI,eAAe,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,MAA2B;AAACK,EAAAA,IAAI,EAAET,kBAAP;AAA2BU,EAAAA,IAAI,EAAE;AAACR,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBC,IAAAA;AAAhB;AAAjC,CAA3B,CAAxB;AACP,OAAO,MAAMQ,eAAe,GAAG,MAAOC,QAAD,IAAc;AAC/Cf,EAAAA,OAAO,CAACgB,EAAR,GAAaC,IAAb,CAAkBL,IAAI,IAAI;AACtB,QAAIA,IAAI,CAACM,UAAL,KAAmB,CAAvB,EAAyB;AACrB,UAAI;AAACC,QAAAA,EAAD;AAAKd,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAqBM,IAAI,CAACA,IAA9B;AACAG,MAAAA,QAAQ,CAACF,eAAe,CAACM,EAAD,EAAId,KAAJ,EAAUC,KAAV,CAAhB,CAAR;AACH;AACR,GALG;AAKD,CANI;AAQP,OAAO,IAAIA,KAAK,GAAG,CAACD,KAAD,EAAQe,QAAR,EAAkBC,UAAlB,KAAiCN,QAAD,IAAc;AAC7Df,EAAAA,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBe,QAArB,EAA+BC,UAA/B,EAA2CJ,IAA3C,CAAgDK,QAAQ,IAAI;AACxD,QAAGA,QAAQ,CAACV,IAAT,CAAcM,UAAd,KAA6B,CAAhC,EAAmC;AAC/BH,MAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH,KAHD,MAIK;AACDD,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH;AACJ,GARD;AASH,CAVM;AAWP,OAAO,IAAIC,MAAM,GAAG,CAACpB,KAAD,EAAQe,QAAR,EAAkBC,UAAlB,KAAiCN,QAAD,IAAc;AAC9Df,EAAAA,OAAO,CAACyB,MAAR,GACKR,IADL,CACUK,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACV,IAAT,CAAcM,UAAd,KAA6B,CAAjC,EAAmC,CAElC;AACJ,GALL;AAMH,CAPM;AAQP,eAAeV,WAAf","sourcesContent":["import {authAPI} from \"../api/api\";\nimport {logIn} from \"./login-reducer\";\n\n\nconst SET_AUTH_USER_DATA = 'SET_AUTH_USER_DATA';\n\nlet initialState = {\n    userId:null,\n    email:null,\n    login:null,\n    isAuth:false\n    }\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_AUTH_USER_DATA:\n            return {\n                ...state,\n                ...action.data,\n                isAuth: true\n            }\n        default: return state;\n    }\n}\n\nexport const setAuthUserData = (userId, email, login) => ({type: SET_AUTH_USER_DATA, data: {userId, email, login}})\nexport const getAuthUserData = () => (dispatch) => {\n    authAPI.me().then(data => {\n        if (data.resultCode ===0){\n            let {id, email, login} = data.data;\n            dispatch(setAuthUserData(id,email,login));\n        }\n})}\n\nexport let login = (email, password, rememberMe) =>(dispatch) => {\n    authAPI.login(email, password, rememberMe).then(response => {\n        if(response.data.resultCode === 0) {\n            dispatch(getAuthUserData())\n            console.log('Authorization is on!')\n        }\n        else {\n            console.log('Invalid authorization!')\n        }\n    })\n}\nexport let logout = (email, password, rememberMe) =>(dispatch) => {\n    authAPI.logout()\n        .then(response => {\n            if (response.data.resultCode === 0){\n                \n            }\n        })\n}\nexport default authReducer;\n"]},"metadata":{},"sourceType":"module"}