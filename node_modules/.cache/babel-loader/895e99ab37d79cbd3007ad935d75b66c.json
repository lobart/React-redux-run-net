{"ast":null,"code":"const FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SETUSERS = 'SETUSERS';\nlet initialState = {\n  users: [{\n    id: 0,\n    followed: true,\n    fullname: 'Artem',\n    status: \"I'm a boss\",\n    location: {\n      country: 'Belarus',\n      city: 'Minsk'\n    }\n  }, {\n    id: 1,\n    followed: true,\n    fullname: 'Alex',\n    status: \"I'm a boss\",\n    location: {\n      country: 'Russia',\n      city: 'Moscow'\n    }\n  }, {\n    id: 2,\n    followed: true,\n    fullname: 'Roma',\n    status: \"I'm a boss\",\n    location: {\n      country: 'Ukraine',\n      city: 'Kiev'\n    }\n  }]\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userID) {\n            return { ...u,\n              followed: true\n            };\n          } else {\n            return u;\n          }\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userID) {\n            return { ...u,\n              followed: false\n            };\n          } else {\n            return u;\n          }\n        })\n      };\n\n    case SETUSERS:\n      return { ...state,\n        users: [...state.users, ...action.users]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport let followAC = userID => ({\n  type: FOLLOW,\n  userID\n});\nexport let unfollowAC = userID => ({\n  type: UNFOLLOW,\n  userID\n});\nexport let setUsers = users => ({\n  type: SETUSERS,\n  users\n});\nexport default usersReducer;","map":{"version":3,"sources":["/home/archi/MyProjects/React-redux-run-net/src/redux/user-reducer.js"],"names":["FOLLOW","UNFOLLOW","SETUSERS","initialState","users","id","followed","fullname","status","location","country","city","usersReducer","state","action","type","map","u","userID","followAC","unfollowAC","setUsers"],"mappings":"AAAA,MAAMA,MAAM,GAAG,QAAf;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,IAAIC,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAC,CACF;AAACC,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,QAAQ,EAAE,IAAlB;AAAwBC,IAAAA,QAAQ,EAAE,OAAlC;AAA2CC,IAAAA,MAAM,EAAE,YAAnD;AAAiEC,IAAAA,QAAQ,EAAE;AAACC,MAAAA,OAAO,EAAE,SAAV;AAAqBC,MAAAA,IAAI,EAAE;AAA3B;AAA3E,GADE,EAEF;AAACN,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,QAAQ,EAAE,IAAlB;AAAwBC,IAAAA,QAAQ,EAAE,MAAlC;AAA0CC,IAAAA,MAAM,EAAE,YAAlD;AAAgEC,IAAAA,QAAQ,EAAE;AAACC,MAAAA,OAAO,EAAE,QAAV;AAAoBC,MAAAA,IAAI,EAAE;AAA1B;AAA1E,GAFE,EAGF;AAACN,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,QAAQ,EAAE,IAAlB;AAAwBC,IAAAA,QAAQ,EAAE,MAAlC;AAA0CC,IAAAA,MAAM,EAAE,YAAlD;AAAgEC,IAAAA,QAAQ,EAAE;AAACC,MAAAA,OAAO,EAAE,SAAV;AAAqBC,MAAAA,IAAI,EAAE;AAA3B;AAA1E,GAHE;AADS,CAAnB;;AAQA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGV,YAAT,EAAuBW,MAAvB,KAAkC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKf,MAAL;AACI,aAAO,EACH,GAAGa,KADA;AAEHT,QAAAA,KAAK,EAAES,KAAK,CAACT,KAAN,CAAYY,GAAZ,CAAiBC,CAAC,IAAI;AACzB,cAAIA,CAAC,CAACZ,EAAF,KAASS,MAAM,CAACI,MAApB,EAA2B;AACvB,mBAAO,EAAC,GAAGD,CAAJ;AAAOX,cAAAA,QAAQ,EAAE;AAAjB,aAAP;AACH,WAFD,MAEO;AACH,mBAAOW,CAAP;AACH;AACJ,SANM;AAFJ,OAAP;;AAUJ,SAAKhB,QAAL;AACI,aAAO,EACH,GAAGY,KADA;AAEHT,QAAAA,KAAK,EAAES,KAAK,CAACT,KAAN,CAAYY,GAAZ,CAAiBC,CAAC,IAAI;AACzB,cAAIA,CAAC,CAACZ,EAAF,KAASS,MAAM,CAACI,MAApB,EAA2B;AACvB,mBAAO,EAAC,GAAGD,CAAJ;AAAOX,cAAAA,QAAQ,EAAE;AAAjB,aAAP;AACH,WAFD,MAEO;AACH,mBAAOW,CAAP;AACH;AACJ,SANM;AAFJ,OAAP;;AAUJ,SAAKf,QAAL;AACI,aAAO,EAAC,GAAGW,KAAJ;AAAWT,QAAAA,KAAK,EAAG,CAAC,GAAGS,KAAK,CAACT,KAAV,EAAiB,GAAGU,MAAM,CAACV,KAA3B;AAAnB,OAAP;;AACJ;AAAS,aAAOS,KAAP;AAzBb;AA0BF,CA3BF;;AA6BA,OAAO,IAAIM,QAAQ,GAAID,MAAD,KAAa;AAACH,EAAAA,IAAI,EAACf,MAAN;AAAckB,EAAAA;AAAd,CAAb,CAAf;AACP,OAAO,IAAIE,UAAU,GAAIF,MAAD,KAAa;AAACH,EAAAA,IAAI,EAACd,QAAN;AAAgBiB,EAAAA;AAAhB,CAAb,CAAjB;AACP,OAAO,IAAIG,QAAQ,GAAIjB,KAAD,KAAY;AAACW,EAAAA,IAAI,EAAEb,QAAP;AAAiBE,EAAAA;AAAjB,CAAZ,CAAf;AAGP,eAAgBQ,YAAhB","sourcesContent":["const FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SETUSERS = 'SETUSERS';\nlet initialState = {\n    users:[\n        {id: 0, followed: true, fullname: 'Artem', status: \"I'm a boss\", location: {country: 'Belarus', city: 'Minsk'}},\n        {id: 1, followed: true, fullname: 'Alex', status: \"I'm a boss\", location: {country: 'Russia', city: 'Moscow'}},\n        {id: 2, followed: true, fullname: 'Roma', status: \"I'm a boss\", location: {country: 'Ukraine', city: 'Kiev'}}\n    ]\n}\n\nconst usersReducer = (state = initialState, action) => {\n    switch (action.type){\n        case FOLLOW :\n            return {\n                ...state,\n                users: state.users.map (u => {\n                    if (u.id === action.userID){\n                        return {...u, followed: true};\n                    } else {\n                        return u;\n                    }\n                })\n            }\n        case UNFOLLOW :\n            return {\n                ...state,\n                users: state.users.map (u => {\n                    if (u.id === action.userID){\n                        return {...u, followed: false};\n                    } else {\n                        return u;\n                    }\n                })\n            }\n        case SETUSERS:\n            return {...state, users : [...state.users, ...action.users]};\n        default: return state;\n}}\n\nexport let followAC = (userID) => ({type:FOLLOW, userID });\nexport let unfollowAC = (userID) => ({type:UNFOLLOW, userID});\nexport let setUsers = (users) => ({type: SETUSERS, users});\n\n\nexport default  usersReducer;"]},"metadata":{},"sourceType":"module"}