{"ast":null,"code":"var _jsxFileName = \"/home/archi/MyProjects/React-redux-run-net/src/components/Dialogs/Messages/Messages-container.js\";\nimport Messages from \"./Messages\";\nimport { addMessageAction, updateTextMessageAction } from \"../../../redux/message-reducer\";\nimport { addPostAction, updateTextPostAction } from \"../../../redux/post-reducer\";\nimport { connect } from \"react-redux\";\nimport MyPosts from \"../../Content/MyPosts/MyPosts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MessagesContainer = props => {\n  let addMessage = text => {\n    props.store.dispatch(addMessageAction(text));\n  };\n\n  let onMessageChange = text => {\n    props.store.dispatch(updateTextMessageAction(text));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Messages, {\n    newMessageText: props.store.getState().messagesPage.newMessageText,\n    onMessageChange: onMessageChange,\n    addMessage: addMessage,\n    messagesData: props.store.getState().messagesPage.messagesData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\n_c = MessagesContainer;\n\nlet mapStateToProps = state => {\n  return {\n    newMessageText: state.messagesPage.newMessageText,\n    messagesData: state.messagesPage.messagesData\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    onPostChange: text => {\n      dispatch(updateTextPostAction(text));\n    },\n    addPost: text => {\n      dispatch(addPostAction(text));\n    }\n  };\n};\n\nconst MyPostsContainer = connect(mapDispatchToProps, mapStateToProps)(MyPosts);\nexport default MessagesContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessagesContainer\");","map":{"version":3,"sources":["/home/archi/MyProjects/React-redux-run-net/src/components/Dialogs/Messages/Messages-container.js"],"names":["Messages","addMessageAction","updateTextMessageAction","addPostAction","updateTextPostAction","connect","MyPosts","MessagesContainer","props","addMessage","text","store","dispatch","onMessageChange","getState","messagesPage","newMessageText","messagesData","mapStateToProps","state","mapDispatchToProps","onPostChange","addPost","MyPostsContainer"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,SAAQC,gBAAR,EAA0BC,uBAA1B,QAAwD,gCAAxD;AACA,SAAQC,aAAR,EAAuBC,oBAAvB,QAAkD,6BAAlD;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,+BAApB;;;AAEA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACjC,MAAIC,UAAU,GAAIC,IAAD,IAAU;AACvBF,IAAAA,KAAK,CAACG,KAAN,CAAYC,QAAZ,CAAqBX,gBAAgB,CAACS,IAAD,CAArC;AACH,GAFD;;AAGA,MAAIG,eAAe,GAAIH,IAAD,IAAU;AAC5BF,IAAAA,KAAK,CAACG,KAAN,CAAYC,QAAZ,CAAqBV,uBAAuB,CAACQ,IAAD,CAA5C;AACH,GAFD;;AAGA,sBACI,QAAC,QAAD;AAAU,IAAA,cAAc,EAAIF,KAAK,CAACG,KAAN,CAAYG,QAAZ,GAAuBC,YAAvB,CAAoCC,cAAhE;AAAgF,IAAA,eAAe,EAAIH,eAAnG;AAAoH,IAAA,UAAU,EAAIJ,UAAlI;AAA8I,IAAA,YAAY,EAAGD,KAAK,CAACG,KAAN,CAAYG,QAAZ,GAAuBC,YAAvB,CAAoCE;AAAjM;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAVD;;KAAMV,iB;;AAYN,IAAIW,eAAe,GAAIC,KAAD,IAAU;AAC5B,SAAO;AACCH,IAAAA,cAAc,EAAEG,KAAK,CAACJ,YAAN,CAAmBC,cADpC;AAECC,IAAAA,YAAY,EAAGE,KAAK,CAACJ,YAAN,CAAmBE;AAFnC,GAAP;AAKH,CAND;;AAOA,IAAIG,kBAAkB,GAAIR,QAAD,IAAa;AAClC,SAAM;AACFS,IAAAA,YAAY,EAAIX,IAAD,IAAU;AACrBE,MAAAA,QAAQ,CAACR,oBAAoB,CAACM,IAAD,CAArB,CAAR;AACH,KAHC;AAIFY,IAAAA,OAAO,EAAIZ,IAAD,IAAU;AAChBE,MAAAA,QAAQ,CAACT,aAAa,CAACO,IAAD,CAAd,CAAR;AACH;AANC,GAAN;AAQH,CATD;;AAWA,MAAMa,gBAAgB,GAAGlB,OAAO,CAACe,kBAAD,EAAoBF,eAApB,CAAP,CAA4CZ,OAA5C,CAAzB;AAGA,eAAeC,iBAAf","sourcesContent":["import Messages from \"./Messages\";\nimport {addMessageAction, updateTextMessageAction} from \"../../../redux/message-reducer\";\nimport {addPostAction, updateTextPostAction} from \"../../../redux/post-reducer\";\nimport {connect} from \"react-redux\";\nimport MyPosts from \"../../Content/MyPosts/MyPosts\";\n\nconst MessagesContainer = (props) => {\n    let addMessage = (text) => {\n        props.store.dispatch(addMessageAction(text))\n    }\n    let onMessageChange = (text) => {\n        props.store.dispatch(updateTextMessageAction(text));\n    }\n    return(\n        <Messages newMessageText = {props.store.getState().messagesPage.newMessageText} onMessageChange = {onMessageChange} addMessage = {addMessage} messagesData ={props.store.getState().messagesPage.messagesData} />\n    )\n}\n\nlet mapStateToProps = (state) =>{\n    return({\n            newMessageText: state.messagesPage.newMessageText,\n            messagesData : state.messagesPage.messagesData\n        }\n    )\n}\nlet mapDispatchToProps = (dispatch) =>{\n    return{\n        onPostChange : (text) => {\n            dispatch(updateTextPostAction(text))\n        },\n        addPost : (text) => {\n            dispatch(addPostAction(text))\n        }\n    }\n}\n\nconst MyPostsContainer = connect(mapDispatchToProps,mapStateToProps)(MyPosts);\n\n\nexport default MessagesContainer;"]},"metadata":{},"sourceType":"module"}